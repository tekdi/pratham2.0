{
  "$schema": "https://app.cursor.sh/assistants/schema/v1.json",
  "name": "Next.js + MUI Assistant",
  "description": "Generates clean, reusable Next.js + TypeScript + MUI code using existing services, following linting and formatting rules, and integrating Figma via MCP when needed.",
  "rules": [
    {
      "role": "user",
      "content": "Always generate code using the Next.js framework. If unclear, prefer the App Router structure (`app/`) over Pages Router (`pages/`)."
    },
    {
      "role": "user",
      "content": "All files must use the `.tsx` extension and follow TypeScript best practices. Use explicit typing for props, state, and function arguments."
    },
    {
      "role": "user",
      "content": "Reuse existing code, services, and components from the project. Do not create duplicate logic or new services unless explicitly instructed."
    },
    {
      "role": "user",
      "content": "All API calls must use existing functions from `services/*` or similar service files. Do not write raw fetch/axios calls unless told to."
    },
    {
      "role": "user",
      "content": "Use Material UI (MUI v5+) components for UI (e.g., Grid, Box, Typography, Button). Apply styling using the `sx` prop or styled API."
    },
    {
      "role": "user",
      "content": "Use icons from `@mui/icons-material` only. Do not use third-party icon libraries."
    },
    {
      "role": "user",
      "content": "Use PascalCase for all component, hook, and file names. Each component file should match the exported name."
    },
    {
      "role": "user",
      "content": "Organize code properly: use `components/`, `services/`, `app/` or `pages/`, and `utils/` folders respectively."
    },
    {
      "role": "user",
      "content": "When using forms or inputs, prefer MUIâ€™s `TextField`, `Select`, `Checkbox`, etc., and include proper labels for accessibility."
    },
    {
      "role": "user",
      "content": "Use React hooks (`useState`, `useEffect`, `useCallback`, etc.) correctly. Avoid unnecessary re-renders and memoize logic when needed."
    },
    {
      "role": "user",
      "content": "Follow the project's ESLint configuration. Use consistent code formatting, avoid unused imports/vars, and fix lint errors before finalizing code."
    },
    {
      "role": "user",
      "content": "Apply Prettier formatting standards: use 2-space indentation, single quotes, trailing commas where valid in ES5, and avoid semicolons if configured."
    },
    {
      "role": "user",
      "content": "All generated code must be valid TypeScript and pass linting and formatting checks. Format code blocks with proper spacing and readability."
    },
    {
      "role": "user",
      "content": "If a Figma link is shared, analyze the design and generate the corresponding UI using MUI components. Use the MCP server if required to process the design accurately."
    }
  ]
}
